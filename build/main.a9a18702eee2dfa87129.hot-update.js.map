{"version":3,"file":"main.a9a18702eee2dfa87129.hot-update.js","sources":["webpack:///./src/server.js"],"sourcesContent":["import App from './App';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport faker from 'faker';\nimport fs from 'fs';\n\nimport { renderToString } from 'react-dom/server';\nimport { Client  } from '@elastic/elasticsearch';\n\nconst client = new Client({ node: 'http://192.168.100.177:9200'  })\n\nconst assets = require(process.env.RAZZLE_ASSETS_MANIFEST);\n\nconst router = express.Router();\nconst server = express();\nserver\n  .disable('x-powered-by')\n  .use(express.static(process.env.RAZZLE_PUBLIC_DIR))\n  .use(bodyParser.json())\n  .get('/*', (req, res) => {\n    const context = {};\n    const markup = renderToString(\n      <StaticRouter context={context} location={req.url}>\n        <App />\n      </StaticRouter>\n    );\n\n    if (context.url) {\n      res.redirect(context.url);\n    } else {\n      res.status(200).send(\n        `<!doctype html>\n    <html lang=\"\">\n    <head>\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n        <meta charset=\"utf-8\" />\n        <title>Welcome to Razzle</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        ${\n          assets.client.css\n            ? `<link rel=\"stylesheet\" href=\"${assets.client.css}\">`\n            : ''\n        }\n        ${\n          process.env.NODE_ENV === 'production'\n            ? `<script src=\"${assets.client.js}\" defer></script>`\n            : `<script src=\"${assets.client.js}\" defer crossorigin></script>`\n        }\n    </head>\n    <body>\n        <div id=\"root\">${markup}</div>\n    </body>\n</html>`\n      );\n    }\n  });\n\nserver.use('/', router)\n\nrouter.post('/query', async (req, res) => {\n\tconst result = await client.search({\n\t\tindex: req.body.index,\n\t\tbody: JSON.parse(req.body.query)\n\t})\n\tif (result.body.hits.hits.length > 0) {\n\t\tres.send({\n\t\t\tdata: result.body.hits.hits[0]\n\t\t})\n\t} else {\n\t\tres.send({data: null})\n\t}\n})\nfunction repeatData(data, change, repeat, total) {\n\tlet arr = [];\n\tfor (var t = 0; t < total / repeat; t++) {\n\t\tchange.forEach((item) => {\n\t\t\tconst [key, type] = item.split('#');\n\t\t\tdata[key] = faker.internet[type]();\n\t\t})\n\t\tfor (var i = 0; i < repeat; i++) {\n\t\t\tdata = Object.assign({}, data);\n\t\t\tdata.input_time = ++data.input_time;\n\t\t\tdata.id = faker.random.uuid();\n\t\t\tarr.push(data);\n\t\t}\n\t}\n\treturn arr;\n}\nrouter.post('/run', async (req, res, next) => {\n\tlet source = JSON.parse(req.body.source);\n\tlet change = req.body.change.split('\\n');\n\tlet control = req.body.control.split('\\n');\n\tlet controlObj = {};\n\tcontrol.forEach((item) => {\n\t\tconst [key, value] = item.split(':');\n\t\tcontrolObj[key] = parseInt(value, 10);\n\t})\n\tlet dataArr = repeatData(source, change, control.repeat || 1, control.total || 1)\n\tfs.writeFileSync('./data', JSON.stringify(dataArr));\n\n\ttry {\n\t\tconst result = await client.bulk({\n\t\t\tbody: dataArr.flatMap(source => [\n\t\t\t\t{ index: { _index: control.index, _type: \"log\", _id: source.id  }  },\n\t\t\t\tsource\n\t\t\t])\n\t\t})\n\t\tconsole.log(result);\n\t\tconsole.log('--------', result.body.errors)\n\t} catch(e) {\n\t}\n\n\tres.send('ok');\n})\nexport default server;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAwBA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AACA;AAFA;AACA;AACA;AAGA;AACA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAcA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AACA;AAdA;AAaA;AAMA;AACA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAwBA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0BA;;;;A","sourceRoot":""}